# LLM config file

# USD / 1M tokens
[models."gpt-4.1-mini"]
input_tokens = 0.80    # OPENAI
cached_tokens = 0.20
output_tokens = 3.20   # OPENAI
prompt_tokens = 0.80
completion_tokens = 3.20

[models."gpt-4.1-nano"]
input_tokens = 0.20    # OPENAI
cached_tokens = 0.05
output_tokens = 0.80   # OPENAI
prompt_tokens = 0.20
completion_tokens = 0.80

# EVALUATED TOPICS
[[topics]]
name = "Modularity"
weight = 1.0
description = "Evaluate whether the program is organized into multiple, self-contained functions, each performing one specific and clearly defined operation. Check that functions interact through parameters and return values instead of shared global data. Each function should encapsulate a complete logical task, such as input handling, computation, or output formatting. If every function maintains this clarity of purpose, has a proper interface, and avoids redundant dependencies, the topic is fully satisfied and must receive the maximum score."

[[topics]]
name = "Correct use of dynamic memory"
weight = 1.0
description = "Assess the correctness and safety of memory allocation and management. Verify that memory is allocated using malloc, calloc, or realloc with accurate size calculations and that realloc is used safely without losing pointers. Check for proper handling of allocation failures and that all allocated memory is released when no longer needed. If the program demonstrates safe allocation, resizing, and cleanup without leaks or invalid access, the topic is fully satisfied and must receive the maximum score."

[[topics]]
name = "Appropriate data structures"
weight = 1.0
description = "Determine whether the data structures chosen are well-suited to represent the problem domain and ensure logical grouping of related information. Structs should group related fields meaningfully, arrays should be used for collections of homogeneous data, and pointers should be applied only when necessary for flexibility or efficiency. If data organization is coherent, consistent, and supports clear operations on the dataset, the topic is fully satisfied and must receive the maximum score."

[[topics]]
name = "Error handling"
weight = 1.0
description = "Check that the program systematically validates critical runtime operations, such as command-line argument count, file opening, and memory allocation. Functions should detect and respond to errors promptly using return values or informative messages, ensuring the program remains stable. If all potential error sources are verified and handled gracefully, maintaining robustness and preventing undefined behavior, the topic is fully satisfied and must receive the maximum score."

# SUMMARY ANALYSIS
[[analysis]]
name = "priority issues"
description = "Mention the main problems identified in the analysis of the various topics, explaining where they occur and what they consist of."

[[analysis]]
name = "concrete suggestions"
description = "Based on the highlighted problems, provide concrete suggestions aimed at improving and correcting the program in the areas where such issues occur."
